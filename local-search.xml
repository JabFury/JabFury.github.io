<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于frappe-gantt开发自定义扩展的甘特图业务</title>
    <link href="/2023/02/09/react/ganttByResearch/"/>
    <url>/2023/02/09/react/ganttByResearch/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>根据业务要求，需要做一个根据任务周期来统计人员任务量的功能。需要能够清晰的展示人员与工作量的安排情况，以便每个项目组或者部门 leader 方便安排人手及工作，界面展示如下：<br><img src="/2023/02/09/react/ganttByResearch/1.gif"></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li>有人员列表，并且人员列表下有其对应的任务及相关信息</li><li>拥有检索，查询功能</li><li>在人员行显示工作任务的数量，并显示在相对应的日期上（根据颜色不同反应出人员工作的任务量是正常或是积压）</li><li>在事项行上显示相对应的任务周期</li><li>点击人员工作任务显示详情弹窗</li><li>点击事项任务显示任务详情弹窗</li><li>点击事项行显示事项详情弹窗</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="组件选择"><a href="#组件选择" class="headerlink" title="组件选择"></a>组件选择</h3><p>首先我们需要的是一个传统的 crud 的功能，顶部是筛选的表单组件，左边的列表我选择的是 antd 的 table 组件，原因是 antd 的 table 组件可以直接支持树结构的数据。</p><p>调研了几个甘特图的组件，最终选择了 frappe-gantt，选择原因是其非常的轻量，性能高，由于不需要甘特图组件之间的线，以及里程碑之类的功能，所以没必要选择功能性很庞大的组件避免提高浏览器的负荷。</p><h3 id="评审功能"><a href="#评审功能" class="headerlink" title="评审功能"></a>评审功能</h3><p>传统甘特图都是一条数据对应一条甘特图的进度条，而本次功能要求是在筛选出的时间范围内展示出所有的任务进度条，所以需要对组件进行源码改造，实现方案是根据任务的时间段返回相对应的分段进度条，然后拼接起来行成完成的进度条，即渲染进度条字段的返回数据类型必须是数组类型，跟后端沟通后，字段格式如下图：<br><img src="/2023/02/09/react/ganttByResearch/2.jpg"></p><p>children 字段存放的是这个成员在筛选出的时间范围内的任务数量，由于任务只存在一个进度条，故直接定义对象存储即可，除了需要的数据字段，必有的是 start、end 字段，代表的是进度条的起止时间，组件也是通过这两个字段渲染图表的。</p><p>ganttList 字段代表的是这个成员在筛选出的时间范围内的时间进度条，根据每一项的 start、end 字段进行渲染，这个字段只会存在每一个成员的字段下。</p><p>其他字段是用于展示任务数量，完成情况，任务类型，优先级，名称等。</p><h2 id="开发功能"><a href="#开发功能" class="headerlink" title="开发功能"></a>开发功能</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格组件根据 antd 的文档开发即可，这里我们是将表格封装成了组件，cb 方法返回了调取接口后的数据。当获取到了接口返回的信息后，先注册甘特图的图表，如果存在了数据，就调用甘特图刷新的方法。这里自己定义了甘特图与 table 每行的高度保持一致。</p><!-- ![注册及刷新甘特图组件](3.jpg) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> GanttList: React.FC&lt;Props&gt; = <span class="hljs-function">(<span class="hljs-params">&#123;...props&#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> gantt = useRef&lt;any&gt;();<br>    <span class="hljs-keyword">const</span> datas = useRef&lt;any&gt;();<br><br>    <span class="hljs-keyword">const</span> tableCallback = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        setLoading(<span class="hljs-literal">false</span>);<br>        datas.current = data;<br>        setDataList(data);<br>        <span class="hljs-keyword">const</span> tasks = createGanttList(data);<br>        <span class="hljs-comment">//非空判断   避免组件（甘特图组件）报错</span><br>        <span class="hljs-keyword">if</span> (tasks.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (gantt.current) &#123;<br>                gantt.current?.refresh(tasks);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                gantt.current = <span class="hljs-keyword">new</span> Gantt(<span class="hljs-string">&#x27;#gantt&#x27;</span>, tasks, &#123;<br>                    <span class="hljs-attr">header_height</span>: <span class="hljs-number">35</span>,<br>                    <span class="hljs-attr">padding</span>: <span class="hljs-number">31.8</span>,<br>                    <span class="hljs-attr">language</span>: <span class="hljs-string">&#x27;zh&#x27;</span>,<br>                    <span class="hljs-attr">view_mode</span>: viewMode,<br>                    <span class="hljs-attr">custom_popup_html</span>:  <span class="hljs-function">(<span class="hljs-params">task</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div&gt;....弹框组件&lt;/div&gt;`</span>;<br>                    &#125;,<br>                &#125;);<br>            &#125;<br>        &#125;<br>        changeGanttHeight();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="hljs-comment">//自定义table组件</span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TablePageList</span></span></span><br><span class="hljs-tag"><span class="xml">            //<span class="hljs-attr">......</span></span></span><br><span class="hljs-tag"><span class="xml">            //<span class="hljs-attr">......</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">cb</span>=<span class="hljs-string">&#123;tableCallback&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">        /&gt;</span></span><br>    );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> GanttList;<br><br></code></pre></td></tr></table></figure><p>在 onRow 属性里面定义了表格的 data 属性，将值存入，用于 expand 方法里，遍历每行属性，生成最新的甘特图的值，然后调用刷新方法，同时重新计算甘特图的高度，这样就能保证每条数据都保持一致。</p><!-- ![onRow属性](4.jpg) --><!-- ![onExpandedRowsChange属性](5.jpg) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onRow</span>(<span class="hljs-params">record: any</span>) =&gt; </span>&#123;<br>    <span class="hljs-keyword">if</span> (record.length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> record<br>    &#125;<br>    <span class="hljs-keyword">if</span> (record?.ganttList?.length &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>                ...record,<br>                <span class="hljs-attr">ganttList</span>: record?.ganttList?.map(<span class="hljs-function">(<span class="hljs-params">y: any</span>) =&gt;</span> (&#123;<br>                    ...y,<br>                    <span class="hljs-attr">custom_class</span>: renderTaskBarStatus(y?.issueCount)?.barColor,<br>                    <span class="hljs-attr">progress</span>: <span class="hljs-number">100</span>,<br>                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                    <span class="hljs-attr">title</span>: renderTaskBarStatus(y?.issueCount)?.title<br>                &#125;))<br>            &#125;)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>            ...record,<br>            <span class="hljs-attr">custom_class</span>: record?.issueDLStatusSet?.includes(<span class="hljs-string">&#x27;3&#x27;</span>) ? styles.red : (record.statusType === <span class="hljs-number">1</span> ? styles.gray : record.statusType === <span class="hljs-number">2</span> ? styles.green : styles.blue),<br>        &#125;),<br>    &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onExpandedRowsChange</span>(<span class="hljs-params">expandedRows: Key[]</span>) =&gt; </span>&#123;<br>    setExpandedRowKeys(expandedRows);<br>    <span class="hljs-keyword">const</span> _trs = <span class="hljs-built_in">document</span>.querySelectorAll(<br>        <span class="hljs-string">&#x27;#table&#x27;</span> + <span class="hljs-string">&#x27; .ant-table-tbody tr&#x27;</span>,<br>    );<br>    <span class="hljs-keyword">const</span> timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> trs = <span class="hljs-built_in">document</span>.querySelectorAll(<br>            <span class="hljs-string">&#x27;#table&#x27;</span> + <span class="hljs-string">&#x27; .ant-table-tbody tr&#x27;</span>,<br>        );<br>        <span class="hljs-keyword">if</span> (_trs.length === trs.length) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">const</span> tasks: any[] = [];<br>        trs.forEach(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>            tasks.push(<span class="hljs-built_in">JSON</span>.parse(v.getAttribute(<span class="hljs-string">&#x27;data&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span>));<br>        &#125;);<br>        gantt.current.refresh(tasks);<br>        changeGanttHeight();<br>        <span class="hljs-built_in">clearTimeout</span>(timeout)<br>    &#125;, <span class="hljs-number">200</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="计算高度"><a href="#计算高度" class="headerlink" title="计算高度"></a>计算高度</h4><p>计算高度的原理很简单，由于 table 每一行都和甘特图的一一对应，因此我们只需要获取到 table 的高度，就能定义甘特图的高度。需要注意的是如果出现数据为空时，这里的操作是让图标高度展示为 0，而不是销毁组件，因为在获取数据的回调中，set 最新的 list 那一事件循环还未结束，组件就被销毁了因此会直接报错，同时为了不重新再次定义图表，这里将图表的高度设置成 0，并展示出空数据组件即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> changeGanttHeight = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> ganttSvg = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#gantt&quot;</span>);<br>  <span class="hljs-keyword">let</span> table = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#table&quot;</span> + <span class="hljs-string">&quot; .ant-table&quot;</span>);<br>  <span class="hljs-keyword">const</span> _height = datas.current?.length === <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : table?.clientHeight + <span class="hljs-string">&quot;px&quot;</span>;<br>  ganttSvg?.setAttribute(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;height: &quot;</span> + _height);<br><br>  <span class="hljs-comment">//调整图表高度时隐藏点击的弹框</span><br>  gantt.current?.hide_popup();<br><br>  <span class="hljs-keyword">const</span> _ganttContainerDom = <span class="hljs-built_in">document</span>?.querySelector(<span class="hljs-string">&quot;.gantt-container&quot;</span>);<br>  <span class="hljs-keyword">if</span> (datas.current?.length === <span class="hljs-number">0</span>) &#123;<br>    _ganttContainerDom?.setAttribute(<br>      <span class="hljs-string">&quot;style&quot;</span>,<br>      <span class="hljs-string">&quot;min-height: 0 !important; overflow: hidden&quot;</span><br>    );<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    _ganttContainerDom?.setAttribute(<br>      <span class="hljs-string">&quot;style&quot;</span>,<br>      <span class="hljs-string">&quot;min-height: calc(100vh - 213px) !important;&quot;</span><br>    );<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">//不销毁图表，且数据为空时展示空组件</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Col</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&#123;17&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.gannt_page&#125;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gantt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="xml">  &#123;dataList?.length === 0 &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Empty</span> /&gt;</span>&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Col</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><h3 id="修改甘特图源码"><a href="#修改甘特图源码" class="headerlink" title="修改甘特图源码"></a>修改甘特图源码</h3><h4 id="修改-渲染数据"><a href="#修改-渲染数据" class="headerlink" title="修改 渲染数据"></a>修改 渲染数据</h4><p>源码中，图表并不是直接用外层传值进去的数据渲染的，而是将其数据重新封装了一层，当然有些字段也会随之而变，比如时间字段会转成相应的时间戳类型，也会将每层数据增加一层独立 id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果有ganttList</span><br><span class="hljs-keyword">if</span> (((task || &#123;&#125;).ganttList || []).length &gt; <span class="hljs-number">0</span>) &#123;<br>  task.ganttList.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    item._start = date_utils.parse(item.start);<br>    item._end = date_utils.parse(item.end);<br>    <span class="hljs-comment">// make task invalid if duration too large</span><br>    <span class="hljs-keyword">if</span> (date_utils.diff(item._end, item._start, <span class="hljs-string">&quot;year&quot;</span>) &gt; <span class="hljs-number">10</span>) &#123;<br>      item.end = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// cache index</span><br>    item._index = i;<br>    <span class="hljs-comment">// if hours is not set, assume the last day is full day</span><br>    <span class="hljs-comment">// e.g: 2018-09-09 becomes 2018-09-09 23:59:59</span><br>    <span class="hljs-keyword">const</span> task_end_values = date_utils.get_date_values(item._end);<br>    <span class="hljs-keyword">if</span> (task_end_values.slice(<span class="hljs-number">3</span>).every(<span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> d === <span class="hljs-number">0</span>)) &#123;<br>      item._end = date_utils.add(item._end, <span class="hljs-number">24</span>, <span class="hljs-string">&quot;hour&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// invalid flag</span><br>    <span class="hljs-keyword">if</span> (!item.start || !item.end) &#123;<br>      item.invalid = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// uids</span><br>    <span class="hljs-keyword">if</span> (!item.id) &#123;<br>      item.id = generate_id(item);<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后生成的数据如下图：<br><img src="/2023/02/09/react/ganttByResearch/6.jpg" alt="甘特图组件渲染出图表的数据"></p><h4 id="修改-进度条组件"><a href="#修改-进度条组件" class="headerlink" title="修改 进度条组件"></a>修改 进度条组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//源码</span><br><span class="hljs-function"><span class="hljs-title">make_bars</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bars = <span class="hljs-built_in">this</span>.tasks.map(<span class="hljs-function"><span class="hljs-params">task</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> bar = <span class="hljs-keyword">new</span> Bar(<span class="hljs-built_in">this</span>, task);<br>            <span class="hljs-built_in">this</span>.layers.bar.appendChild(bar.group);<br>            <span class="hljs-keyword">return</span> bar;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这是修改前的源码，我们能看到图表是根据数据量来生成相应的进度条，由此我们能得出，如果我们想要拼接的话，就要在一个进度条里包含多个进度条，最后再把这一个进度条画在 layers 上面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//修改后</span><br><span class="hljs-function"><span class="hljs-title">make_bars</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bars = <span class="hljs-built_in">this</span>.tasks.map(<span class="hljs-function"><span class="hljs-params">task</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> _this = <span class="hljs-built_in">this</span>;<br>            <span class="hljs-keyword">let</span> bar = <span class="hljs-keyword">new</span> Bar(<span class="hljs-built_in">this</span>, task);<br>            <span class="hljs-built_in">this</span>.layers.bar.appendChild(bar.group);<br>            <span class="hljs-keyword">if</span> (((task || &#123;&#125;).ganttList || []).length &gt; <span class="hljs-number">0</span>) &#123;<br>                task.ganttList.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">const</span> _childBar = <span class="hljs-keyword">new</span> Bar(_this, item);<br>                    bar.group.appendChild(_childBar.group);<br>                &#125;)<br>            &#125;<br>            <span class="hljs-keyword">return</span> bar;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="修改-弹框组件"><a href="#修改-弹框组件" class="headerlink" title="修改 弹框组件"></a>修改 弹框组件</h4><p>开发弹框组件的时候，主要遇到的两个大坑：</p><ol><li>点击展示弹框时，父容器也出现了弹框；</li><li>由于弹框是个真实 dom，如果列表拉到最下面了，真实 dom 会将整个画布容器撑起来，出现一大片空白</li></ol><p>第一个问题一看就是需要取消冒泡，但是在 index 中很多地方是这样绑定的点击事件，开发的时候也被误导了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span>(<span class="hljs-params">expr, con</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> expr === <span class="hljs-string">&#x27;string&#x27;</span><br>        ? (con || <span class="hljs-built_in">document</span>).querySelector(expr)<br>        : expr || <span class="hljs-literal">null</span>;<br>&#125;<br><br> $.on(<span class="hljs-built_in">this</span>.$svg, <span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-string">&#x27;.bar-wrapper, .handle&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e, element</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> bar_wrapper = $.closest(<span class="hljs-string">&#x27;.bar-wrapper&#x27;</span>, element);<br>            <span class="hljs-comment">//......</span><br>            <span class="hljs-comment">//......</span><br> )<br></code></pre></td></tr></table></figure><p>最后终于在定义进度条的文件中找到,并增加取消冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//bar.js</span><br><span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.invalid) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">this</span>.setup_click_event();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">setup_click_event</span>(<span class="hljs-params"></span>)</span> &#123;<br>        $.on(<span class="hljs-built_in">this</span>.group, <span class="hljs-string">&#x27;focus &#x27;</span> + <span class="hljs-built_in">this</span>.gantt.options.popup_trigger, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">//去掉冒泡，防止点击子元素时父容器也弹出</span><br>            e &amp;&amp; e.stopPropagation();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.action_completed) &#123;<br>                <span class="hljs-comment">// just finished a move action, wait for a few seconds</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.show_popup(&#123; <span class="hljs-attr">x</span>: e.offsetX, <span class="hljs-attr">y</span>: e.offsetY &#125;);<br>            <span class="hljs-built_in">this</span>.gantt.unselect_all();<br>            <span class="hljs-built_in">this</span>.group.classList.add(<span class="hljs-string">&#x27;active&#x27;</span>);<br>        &#125;);<br></code></pre></td></tr></table></figure><p>第二个问题是在弹框文件中，默认定义的弹框都是展示在点击进度条的下方，为了使样式不出现混乱，最开始想过从进度条右边展示，但是一旦数据超过了 10 天或者并排多时，右边展示的弹框需要把进度条拖到相应位置才会展示，不美观因此废弃。还有一种是在画布上画出 svg 的弹框，这样的弊端在于不能自己定义弹框里的展示内容，模板一旦写好就不能扩展，因此也不是最佳选择。最后想到一个比较优质的解决方式就是，通过获取到容器高度以及进度条的 y 的坐标大小进行对比，判断出如果点击的是最底下的几条数据，那么就将弹框向上展示。</p><p>首先，在点击进度条的事件里找到展示弹框的方法，并将其传入当前的坐标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//bar.js</span><br><span class="hljs-built_in">this</span>.show_popup(&#123; <span class="hljs-attr">x</span>: e.offsetX, <span class="hljs-attr">y</span>: e.offsetY &#125;);<br><br><span class="hljs-function"><span class="hljs-title">show_popup</span>(<span class="hljs-params">clickedPosition</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.gantt.bar_being_dragged) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">const</span> start_date = date_utils.format(<span class="hljs-built_in">this</span>.task._start, <span class="hljs-string">&#x27;MMM D&#x27;</span>, <span class="hljs-built_in">this</span>.gantt.options.language);<br>        <span class="hljs-keyword">const</span> end_date = date_utils.format(<br>            date_utils.add(<span class="hljs-built_in">this</span>.task._end, -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;second&#x27;</span>),<br>            <span class="hljs-string">&#x27;MMM D&#x27;</span>,<br>            <span class="hljs-built_in">this</span>.gantt.options.language<br>        );<br>        <span class="hljs-keyword">const</span> subtitle = start_date + <span class="hljs-string">&#x27; - &#x27;</span> + end_date;<br><br><span class="hljs-comment">//手动传入坐标</span><br>        <span class="hljs-built_in">this</span>.gantt.show_popup(&#123;<br>            <span class="hljs-attr">target_element</span>: <span class="hljs-built_in">this</span>.$bar,<br>            <span class="hljs-attr">title</span>: <span class="hljs-built_in">this</span>.task.name,<br>            <span class="hljs-attr">subtitle</span>: subtitle,<br>            <span class="hljs-attr">task</span>: <span class="hljs-built_in">this</span>.task,<br>            <span class="hljs-attr">group</span>: <span class="hljs-built_in">this</span>.group<br>        &#125;, clickedPosition);<br></code></pre></td></tr></table></figure><p>index.js 中接收到坐标，传到弹框实例的方法中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br><span class="hljs-function"><span class="hljs-title">show_popup</span>(<span class="hljs-params">options, clickedPosition</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.popup) &#123;<br>            <span class="hljs-built_in">this</span>.popup = <span class="hljs-keyword">new</span> Popup(<br>                <span class="hljs-built_in">this</span>.popup_wrapper,<br>                <span class="hljs-built_in">this</span>.options.custom_popup_html<br>            );<br>        &#125;<br>        <span class="hljs-built_in">this</span>.popup.show(options, clickedPosition);<br>    &#125;<br></code></pre></td></tr></table></figure><p>在弹框文件中的 show 方法中定义弹框的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//popup.js</span><br><span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params">options, clickedPosition</span>)</span> &#123;<br><br><span class="hljs-comment">//......</span><br><br><span class="hljs-keyword">const</span> _ganttChartTotalHeight = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;gantt&quot;</span>).clientHeight;<br><span class="hljs-built_in">this</span>.parent.style.left = clickedPosition.x - <span class="hljs-number">115</span> + <span class="hljs-string">&quot;px&quot;</span>;<br><span class="hljs-comment">//如果y的坐标 &gt; 总高度-250，弹框向上展示</span><br><span class="hljs-keyword">if</span> (<br>  position_meta.y &gt; <span class="hljs-number">160</span> &amp;&amp;<br>  position_meta.y + <span class="hljs-number">30</span> &gt; _ganttChartTotalHeight - <span class="hljs-number">250</span><br>) &#123;<br>  <span class="hljs-keyword">const</span> isParent = options.task.issueCount &gt;= <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">this</span>.parent.style.top = position_meta.y - (isParent ? <span class="hljs-number">120</span> : <span class="hljs-number">200</span>) + <span class="hljs-string">&quot;px&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">this</span>.parent.style.top = position_meta.y + <span class="hljs-number">30</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.pointer.style.transform = <span class="hljs-string">&quot;rotateZ(90deg)&quot;</span>;<br><span class="hljs-built_in">this</span>.pointer.style.left = <span class="hljs-string">&quot;-7px&quot;</span>;<br><span class="hljs-built_in">this</span>.pointer.style.top = <span class="hljs-string">&quot;2px&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他还有一些别的优化，如图表上显示的年月日等，这些配置统一放到了 format 方法中，都能找得到。包括样式，在相对应的 css 的类中根据产品要求修改即可，至此，整个功能算是基本实现了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于setTimeout的一个机制</title>
    <link href="/2022/06/10/js/setTimeoutProcessed/"/>
    <url>/2022/06/10/js/setTimeoutProcessed/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，setTimeout 是一种宏观任务，而宏观任务的数据结构是队列，它的特点就是 先进先出。</p><p><font color="red">但是，浏览器会根据时间线程来控制队列的执行的顺序。</font></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;任务1&quot;</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;任务2&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>执行结果：<br><img src="/2022/06/10/js/setTimeoutProcessed/1.jpg"></p><p>上述代码执行顺序：</p><ol><li>执行任务 2</li><li>1 秒后执行任务 1<br></li></ol><p>由此我们可得，遇到 setTimeout，先把里面的函数放在浏览器的定时间线程里，等时间到了，浏览器会把对应的函数再加到当前程序执行的队列里。</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中利用对象字面量创建对象原型属性的影响</title>
    <link href="/2021/12/06/js/createPrototypeByObject/"/>
    <url>/2021/12/06/js/createPrototypeByObject/</url>
    
    <content type="html"><![CDATA[<p>众所周知，在 JavaScript 中，每个对象都有原型，在每个原型对象中都有一个 constructor 属性，指向对象本身。当我们在一个对象的原型上定义方法时，通常会这么做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Remilia&quot;</span>, <span class="hljs-number">23</span>);<br><br><span class="hljs-built_in">console</span>.log(p1);<br></code></pre></td></tr></table></figure><p><img src="/2021/12/06/js/createPrototypeByObject/0.jpg"><br>当我们打印该实例对象会发现，在其 prototype 中，除了有其定义的方法，还有指向自己的 contructor 属性。<br><br>如果我们使用对象字面量的形式去为一个原型对象增加属性的时候，会发生什么呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Person.prototype = &#123;<br>  <span class="hljs-attr">sayHi</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>);<br>  &#125;,<br>  <span class="hljs-attr">sayBye</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;goodbye&quot;</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(Person.prototype);<br></code></pre></td></tr></table></figure><p><img src="/2021/12/06/js/createPrototypeByObject/1.jpg"><br>现在整个 prototype 中只有两个定义的方法，没有 contructor 了，原因是：当我们以对象字面量的形式定义方法后，js 默认会将整个原型对象重新赋值，因此这里的 prototype 被新的对象字面量赋值从而丢失了能指向自己对象的 contructor。<br><br>如果我们既想以对象字面量的形式定义原型对象，又想使其与原本的对象关联起来。那么就需要在对象字面量中自己手动定义 constructor 方法并且与原有的对象关联即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Person.prototype = &#123;<br>  <span class="hljs-attr">constructor</span>: Person,<br>  <span class="hljs-attr">sayHi</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>);<br>  &#125;,<br>  <span class="hljs-attr">sayBye</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;goodbye&quot;</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(Person.prototype);<br></code></pre></td></tr></table></figure><p><img src="/2021/12/06/js/createPrototypeByObject/2.jpg"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以对象字面量的形式定义对象的原型属性在实际开发过程中相对来说是比较普遍的，印象定义起来比较方便也很直观，因此这里会存在一个隐形的小坑，报错时很大可能不容易发现。</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-fiber-前置知识</title>
    <link href="/2021/11/26/react/react-fiber-preKnowledge/"/>
    <url>/2021/11/26/react/react-fiber-preKnowledge/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章讲一下 react-fiber 的基本原理。会涉及到一些浏览器的机制，以及 react 与浏览器通信的小知识。<br><br><br>现如今，浏览器的刷新帧率基本都是 1 秒 60 帧，即：1 帧 = 1000ms / 60 ≈ 16.6ms。而在每一帧中，浏览器会做以下几件事：<br><img src="/2021/11/26/react/react-fiber-preKnowledge/1.png"></p><ol><li>接受输入事件：阻塞输入事件（touch，wheel）和非阻塞事件（click，keypress）等</li><li>执行事件回调 （JavaScript）</li><li>开始一帧</li><li>执行 RAF（RequestAnimationFrame）</li><li>计算样式，页面布局 （layout）</li><li>绘制渲染（paint）</li><li>空闲时间（可用 requestIdleCallback 申请时间片）</li></ol><p>其中，前六个任务执行的时间一般约为 6ms 左右，意思就是浏览器平均每一帧大约能够留下 10ms 的时间为空余时间。而 react 正是利用每一帧的空余时间，来执行自己的任务。</p><ul><li>如果执行完一个任务后还有空余的时间且还有任务，则会继续执行。</li><li>如果没有空余时间,则会将控制权交还给浏览器，使其进行下一帧任务。<br>依次循环。<br><img src="/2021/11/26/react/react-fiber-preKnowledge/2.png"></li></ul><!-- react利用requestIdleCallback()  申请时间片 --><p>在每一帧的活动中，申请到的时间片为浏览器每一帧任务剩余的时（约 10ms），<br>当浏览器不需要执行任务（1-6）时，浏览器会将 50ms 左右的时间分给申请的时间片里，<br>以此达到尽快完成任务。<br>这里浏览器分配 50ms 的原因是：<br></p><ul><li>浏览器默认认为：100ms 延迟内用户感觉是流畅的，浏览器会在空余时间分配 1 秒 20 帧，即 1000 / 20 = 50ms。</li></ul><p>react 会模拟 messageChannel 方法来与浏览器实现通信。从而达到申请调度到浏览器每一帧的空余时间<br>postMesage()（宏任务）在重绘之后进行，正好应证了 eventLoop 重绘之后浏览器进入空余时间。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义上传</title>
    <link href="/2021/10/28/js/buttonForUpload/"/>
    <url>/2021/10/28/js/buttonForUpload/</url>
    
    <content type="html"><![CDATA[<p>在实际开发中，如果产品提出一些点击某些可点击的DOM就触发上传事件等需求时，我们可以自己实现一个自定义上传的方法，甚至也可以封装成组件方便使用。</p><p>UI实现原理也比较简单。最核心的就是隐藏系统上传的dom，通过js的点击事件触发其点击事件。然后为其增添一个change的事件即可获取到上传的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input id=<span class="hljs-string">&quot;uploadBtn&quot;</span> type=<span class="hljs-string">&quot;file&quot;</span> style=<span class="hljs-string">&quot;display: none;&quot;</span> /&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clickBtn()&quot;</span>&gt;</span>自定义上传<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clickBtn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;uploadBtn&quot;</span>).click();<br>&#125;<br><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_this</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(_this.target.files[<span class="hljs-number">0</span>]);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="/2021/10/28/js/buttonForUpload/1.jpg"></p><p>这里需要注意一点是：从本地上传文件时，为了安全考虑JavaScript默认是不允许直接读取本地文件，所以得需要<font color="red">URL.createObjectURL</font>获取当前文件的内存URL</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">window</span>.URL.createObjectURL(<span class="hljs-keyword">new</span> Blob([file]));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Event Loop 事件循环</title>
    <link href="/2021/10/25/js/EventLoop/"/>
    <url>/2021/10/25/js/EventLoop/</url>
    
    <content type="html"><![CDATA[<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>事件是可以被Javascript侦测到的行为，通俗的讲就是当用户与Web页面进行某些交互时，解释器就会创建响应的event对象以描述事件信息。<br></p><p>JavaScript 是一门 单线程 语言，即同一时间只能执行一个任务，即代码执行是同步并且阻塞的。<br></p><h4 id="任务队列-（task-queue）"><a href="#任务队列-（task-queue）" class="headerlink" title="任务队列 （task queue）"></a>任务队列 （task queue）</h4><p>队列 是一种 FIFO(First In, First Out) 的数据结构，它的特点就是 先进先出。</p><h4 id="栈-（Stack）"><a href="#栈-（Stack）" class="headerlink" title="栈 （Stack）"></a>栈 （Stack）</h4><p>栈 是一种 LIFO（Last In, First Out）的数据结构，特点即 后进先出。</p><h4 id="调用栈-（Call-Stack）"><a href="#调用栈-（Call-Stack）" class="headerlink" title="调用栈 （Call Stack）"></a>调用栈 （Call Stack）</h4><p>js的事件执行栈就是先进后出，最底层是全局，从上到下读取js，遇到事件就会将其推入栈顶，执行完毕后再推出栈。<br></p><p>由于js单线程同步执行，当我们需要发起了一个网络请求，或者设置了一个定时器延时，就会需要一个异步的队列来储存。因此，就会有宏任务（队列）和微任务（队列）。</p><h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><p>每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）。浏览器为了能够使得JS内部(macro)task与DOM任务能够有序的执行，会在一个宏任务执行结束后，<font color="red">在下一个宏任务执行开始前，对页面进行重新渲染。</font><br></p><p>宏任务包含：<br></p><ul><li>script(整体代码)<br></li><li>setTimeout<br></li><li>setInterval<br></li><li>I/O<br></li><li>UI交互事件<br></li><li>postMessage<br></li><li>MessageChannel<br></li><li>setImmediate(Node.js 环境)<br></li></ul><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><p>在当前 task 执行结束后立即执行的任务。也就是说，在当前task任务后，下一个task之前，在渲染之前。所以它的响应速度相比宏任务会更快，因为<font color="red">无需等待渲染</font>。也就是说，在某一个macrotask执行完后，就会将在它执行期间产生的所有microtask都执行完毕（在渲染前）。</p><p>微任务包含：<br></p><ul><li>Promise.then<br></li><li>Object.observe<br></li><li>MutationObserver<br></li><li>process.nextTick(Node.js 环境)<br></li></ul><h4 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h4><p>后面有些深入的概念还没想好怎么写，大概是事件与动画相互之间的影响之类的，所以这篇文章先暂时写到这。</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于useEffect的一个小考点</title>
    <link href="/2021/09/27/react/reactUseEffectReturn/"/>
    <url>/2021/09/27/react/reactUseEffectReturn/</url>
    
    <content type="html"><![CDATA[<p>在 react useEffect 中，我们都知道的是：<br>&emsp;&emsp;1.第二个参数是用来监听变量变化后才选择是否执行该 effect 中方法的。<br>&emsp;&emsp;2.在什么都不监听（useEffect 第二个参数为[]）的情况下，组件销毁时会执行 return 中的逻辑。</p><p>那么，如果同时存在监听了变量和 return 方法时，useEffect 会怎样执行里面的逻辑呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 为了方便比较组件销毁，这里添加一个不监听变量的effect</span><br>useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;useEffect_[]执行了&quot;</span>);<br>  &#125;;<br>&#125;, []);<br><br>useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;useEffect_count执行了&quot;</span>);<br>  &#125;;<br>&#125;, [count]);<br></code></pre></td></tr></table></figure><p>首先，从字面意思上理解，当 count 发生变化后，会执行 useEffect 中的代码。当组件销毁时不监听变量的 effect 毫无疑问的会执行。而监听变量的 effect 也<font color="red">同样会执行 return 中的逻辑</font>。<br><img src="/2021/09/27/react/reactUseEffectReturn/1.jpg" alt="组件销毁时"></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React useModel之全局变量</title>
    <link href="/2021/09/23/react/reactUseModel/"/>
    <url>/2021/09/23/react/reactUseModel/</url>
    
    <content type="html"><![CDATA[<p>现如今，利用react+umi框架开发项目已成为主流，umi也出了很多非常好用的api和hooks。这篇文章打算来讲一下umi框架的全局变量useModal。</p><h4 id="useModel"><a href="#useModel" class="headerlink" title="useModel"></a>useModel</h4><p>首先，在项目src文件夹下的model文件夹中创建一个存放全局变量的文件。这里可以创建多个，根据文件名字即可引用到相应的全局文件。<br><img src="/2021/09/23/react/reactUseModel/1.jpg"></p><p>然后在文件中可以直接使用react hooks的方法。这里以useState为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">globalFun</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> [count, setCount] = useState&lt;number&gt;(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        count,<br>        setCount<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后在需要使用到全局变量的文件中引入即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useModel &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123;count, setCount&#125; = useModel(<span class="hljs-string">&quot;xxx&quot;</span>);  <span class="hljs-comment">// xxx处填入创建model文件的名字</span><br><br><span class="hljs-built_in">console</span>.log(count);<br><br><span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>setCount(1)&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h4 id="额外补充（函数式组件下的redux）"><a href="#额外补充（函数式组件下的redux）" class="headerlink" title="额外补充（函数式组件下的redux）"></a>额外补充（函数式组件下的redux）</h4><p>以前的react会将全局变量存在redux中，使得项目每次要引用全局变量时会调用redux的那一套方法（每个页面都要与store连接起来），这样写起来会增加一些麻烦，其次就是对于新手来说非常的不友好，这个可能是个人看法，我当初就是很久都没明白。后来随着函数式组件越来越火热，dva推出了useSelector，useDispatch方法来直接获取相应的存在redux中的值，这样使得函数式组件省去了connect那一系列的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dva&#x27;</span>;<br><br><span class="hljs-comment">// useSelector</span><br><span class="hljs-keyword">const</span> &#123; userInfo &#125; = useSelector(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.global);<br><br><span class="hljs-comment">// useDispatch</span><br><span class="hljs-keyword">const</span> dispatch = useDispatch();<br><br>dispatch(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;global/save&#x27;</span>,<br>    <span class="hljs-attr">payload</span>: &#123;<br>        <span class="hljs-attr">userInfo</span>: &#123;<br>            <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;JabFury&#x27;</span><br>        &#125;,<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活随笔 2021-9-12</title>
    <link href="/2021/09/12/life/life-2021-9-12/"/>
    <url>/2021/09/12/life/life-2021-9-12/</url>
    
    <content type="html"><![CDATA[<p>每个时期会有不同的认知。但是有些东西确实没有必要被以过来者的角度提前告知，必须要亲身经历后才会慢慢形成认知。就像无论怎么给小孩子说挣钱来之不易他也不会完全明白那个点，因为根本就没有那个概念。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React useMemo 对于DOM的控制</title>
    <link href="/2021/09/10/react/reactUseMemoToDom/"/>
    <url>/2021/09/10/react/reactUseMemoToDom/</url>
    
    <content type="html"><![CDATA[<p>今天在一次交流DOM的会上发现，useMemo能对避免DOM的多次渲染也有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;WindowScroller<br>    scrollElement=&#123;<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#private-project&quot;</span>)&#125;<br>    ref=&#123;windowScroller&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><p>这个组件会在页面变化时实时监听dom的高度，为了做实验，我们将其写成函数返回，以便于看到后台打印次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> dom = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行了&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#private-project&quot;</span>);<br>&#125;;<br><br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">WindowScroller</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">scrollElement</span>=<span class="hljs-string">&#123;dom()&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;windowScroller&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">/&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/09/10/react/reactUseMemoToDom/1.jpg"></p><p>由于监听的dom是最外层父级的dom不需要变化，所以只需要一次加载。因此，这里可以直接用useMemo实现性能优化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> dom = useMemo(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行了&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#private-project&quot;</span>);<br>&#125;, []);<br><br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">WindowScroller</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">scrollElement</span>=<span class="hljs-string">&#123;dom&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;windowScroller&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">/&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/09/10/react/reactUseMemoToDom/2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活随笔 2021-9-5</title>
    <link href="/2021/09/05/life/life-2021-9-1/"/>
    <url>/2021/09/05/life/life-2021-9-1/</url>
    
    <content type="html"><![CDATA[<p>生活版块上线，这个版块会持续介绍生活上的所见所闻，愿与各位一起分享酸甜苦辣~</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo搭建个人博客</title>
    <link href="/2021/09/03/buildHexo/"/>
    <url>/2021/09/03/buildHexo/</url>
    
    <content type="html"><![CDATA[<h3 id="搭建Hexo"><a href="#搭建Hexo" class="headerlink" title="搭建Hexo"></a>搭建Hexo</h3><h4 id="搭建前提"><a href="#搭建前提" class="headerlink" title="搭建前提"></a>搭建前提</h4><p>搭建前需要以下准备：</p><ul><li>安装<a href="https://nodejs.org/zh-cn/">Node.js</a></li><li>安装<a href="https://git-scm.com/">Git</a></li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>npm install -g hexo-cli   <span class="hljs-comment">#安装Hexo脚手架</span><br><span class="hljs-variable">$ </span>hexo init         <span class="hljs-comment">#Hexo自动执行构建网站所需要的文件</span><br><span class="hljs-variable">$ </span>npm install       <span class="hljs-comment">#安装依赖包</span><br></code></pre></td></tr></table></figure><h4 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span>     #生成静态页面 快捷方式hexo g<br>$ hexo server       #启动本地服务器 快捷方式hexo s<br></code></pre></td></tr></table></figure><p>然后访问<a href="http://localhost:4000就可以看到搭建好了的博客页面，第一篇Hello">http://localhost:4000就可以看到搭建好了的博客页面，第一篇Hello</a> World的文章在source/hello-world.md中。</p><h4 id="新建一个项目（一篇文章）"><a href="#新建一个项目（一篇文章）" class="headerlink" title="新建一个项目（一篇文章）"></a>新建一个项目（一篇文章）</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br>$ hexo server<br></code></pre></td></tr></table></figure><h3 id="Hexo关联Github"><a href="#Hexo关联Github" class="headerlink" title="Hexo关联Github"></a>Hexo关联Github</h3><h4 id="新建一个Github项目，项目名必须要以”用户名-github-io”来命名"><a href="#新建一个Github项目，项目名必须要以”用户名-github-io”来命名" class="headerlink" title="新建一个Github项目，项目名必须要以”用户名.github.io”来命名"></a>新建一个Github项目，项目名必须要以”用户名.github.io”来命名</h4><p><img src="/2021/09/03/buildHexo/2.png"></p><h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><p>先查看是否有ssh密钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ ls ~<span class="hljs-regexp">/. ssh/</span> <span class="hljs-comment">#检查本机已存在的ssh密钥</span><br></code></pre></td></tr></table></figure><p>没有则生成一个密钥文件,windows环境下，该文件夹在C:/Users/XXX/.ssh中，Linux在~/. ssh</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span> <br></code></pre></td></tr></table></figure><p>生成成功后打开文件夹中的id_rsa.pub，将其内容全部复制到Github的Setting/SSH and GPG keys/中</p><p><img src="/2021/09/03/buildHexo/1.png"></p><h4 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h4><p>打开项目根目录下的_config.yml文件，将deploy中的repo参数改为项目配置的github的地址</p><p><img src="/2021/09/03/buildHexo/3.png"></p><p>终端安装一个部署插件：hexo-deployer-git</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>安装完成后，执行命令重新打包一次并部署即可</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span>     #生成静态页面 快捷方式hexo g<br>$ hexo deploy       #部署到Github上 快捷方式hexo d<br></code></pre></td></tr></table></figure><p>浏览器访问：https://你的用户名.github.io就能看到博客了。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>为了使网页看起来更加的高大上，我们可以买个域名，并将其绑定到项目中,当我们已经存在正常使用的域名后，打开域名控制台，在解析设置里配置如下两条记录<br><img src="/2021/09/03/buildHexo/4.png"><br>在github.io项目下设置custom domain,最终能看到“Your site is published at xxx.com”即可<br><img src="/2021/09/03/buildHexo/5.png"><br>最后，在构建好的public文件夹中创建一个CNAME文件，将域名写入其中即可，这里需要注意的是：每次执行hexo clean后，会将整个public清除，因此每次清楚后重新构建时需要注意重新添加。因此，可以直接推到github仓库里。<br><img src="/2021/09/03/buildHexo/6.png"></p><p>至此，整个博客就能搭建完成了。整体来说还是比较简单，而且在构建时遇到的问题基本没有，有的话一般重新跑一遍构建就能解决。文章是用md来写，对于排版规范而言可能一开始没有了解很深，后续研究后加以改善。</p>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客上线</title>
    <link href="/2021/09/03/hello/"/>
    <url>/2021/09/03/hello/</url>
    
    <content type="html"><![CDATA[<p>时隔 1 年半，个人博客又上线了，之前用学生证买的便宜服务器到期就再没续费了。无意间了解到 hexo 就打算来玩一下，结果发现这个东西简单又免费就能搭建出个人博客，而且还能跟域名绑定简直香到爆啊。准备第一篇文章来介绍一下怎么用 hexo 吧（由于文章数量不断累积，它被压到了最底部）。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
